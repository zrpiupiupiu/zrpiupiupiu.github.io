<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vue报错分析及解决</title>
    <link href="/2022/10/13/vue%E6%8A%A5%E9%94%99%E5%88%86%E6%9E%90%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
    <url>/2022/10/13/vue%E6%8A%A5%E9%94%99%E5%88%86%E6%9E%90%E5%8F%8A%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="“xxx”-was-accessed-during-render-but-is-not-defined-on-instance"><a href="#“xxx”-was-accessed-during-render-but-is-not-defined-on-instance" class="headerlink" title="“xxx” was accessed during render but is not defined on instance."></a>“xxx” was accessed during render but is not defined on instance.</h1><p>原因:<br>你的“”xxx‘’属性或者”xxx”方法没有定义</p><p>解决方案:</p><p>查看你的data或者methods或者prop</p>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue Router 搭建</title>
    <link href="/2022/10/13/Vue-Router-%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/10/13/Vue-Router-%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue入门</title>
    <link href="/2022/10/12/vue%E5%85%A5%E9%97%A8/"/>
    <url>/2022/10/12/vue%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[ <p class = "note note-success">记录一下自己vue的学习</p><h1 id="初识vue"><a href="#初识vue" class="headerlink" title="初识vue"></a>初识vue</h1><h2 id="初始化新项目"><a href="#初始化新项目" class="headerlink" title="初始化新项目"></a>初始化新项目</h2><p>这一步我是直接使用<code>vue ui</code> 以图形化界面来创建的</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><ul><li><code>public</code>: 这个目录包含一些在 <a href="https://webpack.js.org/">Webpack</a> 编译过程中没有加工处理过的文件（有一个例外：index.html 会有一些处理）。<ul><li><code>favicon.ico</code>: 这个是项目的图标，当前就是一个 Vue 的 logo。</li><li><code>index.html</code>: 这是应用的模板文件，Vue 应用会通过这个 HTML 页面来运行，也可以通过 lodash 这种模板语法在这个文件里插值。</li></ul></li></ul> <p class = "note note-info">备注： 这个不是负责管理页面最终展示的模板，而是管理 Vue 应用之外的静态 HTML 文件，一般只有在用到一些高级功能的时候才会修改这个文件。</p><ul><li><code>src</code>：这个是 Vue 应用的核心代码目录<ul><li><code>main.js</code>：这是应用的入口文件。目前它会初始化 Vue 应用并且制定将应用挂载到 <code>index.html</code> 文件中的哪个 HTML 元素上。通常还会做一些注册全局组件或者添额外的 Vue 库的操作。</li><li><code>App.vue</code>：这是 Vue 应用的根节点组件，往下看可以了解更多关注 Vue 组件的信息。</li><li><code>components</code>：这是用来存放自定义组件的目录，目前里面会有一个示例组件。</li><li><code>assets</code>：这个目录用来存放像 CSS、图片这种静态资源，但是因为它们属于代码目录下，所以可以用 webpack 来操作和处理。意思就是你可以使用一些预处理比如 <a href="https://sass-lang.com/">Sass&#x2F;SCSS</a> 或者 <a href="https://stylus-lang.com/">Stylus</a>。</li></ul></li></ul> <p class = "note note-info">备注： 根据创建项目时候的一些配置项，可能会有一些其他的预设目录（例如，如果你选择了路由配置，会看到一个 views 的文件夹）</p><h2 id="vue-文件（单文件组件）"><a href="#vue-文件（单文件组件）" class="headerlink" title=".vue 文件（单文件组件）"></a>.vue 文件（单文件组件）</h2><p>组件是构建 Vue 应用中非常重要的一部分</p><p>组件可以把一个很大的应用程序拆分为独立创建和管理的不相关区块，然后彼此按需传递数据，这些小的代码块可以方便更容易的理解和测试。</p><p><strong>vue使用单文件组件， 把模板、相关脚本和 CSS 一起整合放在 .vue 结尾的一个单文件中</strong>。这些文件最终会通过 JS 打包工具（例如 Webpack）处理，这意味着你可以使用构建时工具。你可以使用比如 Babel、TypeScript、SCSS 等来创建更多复杂的组件。</p><p>另外，使用 Vue CLI 创建的项目被配置为在开箱即用的情况下借助 Webpack 使用 <code>.vue</code>文件。实际上，如果您查看我们使用 CLI 创建的项目中的<code>src</code>文件夹，您会看到第一个<code>.vue </code>文件：<code>App.vue</code></p><h3 id="APP-vue"><a href="#APP-vue" class="headerlink" title="APP.vue"></a>APP.vue</h3><p>打开 <code>App.vue</code> 文件，可以看到由 <code>&lt;template&gt;</code>、<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code> 三部分组成，分别包含了<em>组件的模板</em>、<em>脚本</em> 和<em>样式</em> 相关的内容。所有的单文件组件都是这种类似的基本结构。</p><ul><li><code>&lt;template&gt;</code> 包含了所有的标记结构和组件的展示逻辑。template 可以包含任何合法的 HTML，以及一些我们接下来要讲的 Vue 特定的语法。</li></ul> <p class = "note note-info">备注： 通过设置template 标签的 lang 属性，例如可以通lang="pug" 就可以在使用 Pug 模板来替代标准 HTML。在本教程中我们依然会使用标准 HTML，但是你还是值得知道这种可行的方式。</p><ul><li><code>&lt;script&gt;</code> 包含组件中所有的非显示逻辑，最重要的是， <code>&lt;script&gt;</code> 标签需要默认导出一个 JS 对象。该对象是您在本地注册组件、定义属性、处理本地状态、定义方法等的地方。在构建阶段这个包含 template 模板的对象会被处理和转换成为一个有 render() 函数的 Vue 组件。</li><li>组件的 CSS 应该写在 <code>&lt;style&gt;</code> 标签里，如果你添加了 <code>scoped</code> 属性（形如 <code>&lt;style scoped&gt;</code>），Vue 会把样式的范围限制到单文件组件的内容里。这个是类似于 CSS-in-JS 的解决方案，只不过允许书写纯粹的 CSS。</li></ul> <p class = "note note-info">备注： 如果通过 CLI 创建项目时选择了 CSS 预处理器，则可以将 lang 属性添加到 style 标签中，以便 Webpack 可以在构建时处理内容。例如，< style lang ="scss"> 将允许您在样式信息中使用 SCSS 语法。</p><p>对于 <code>App.vue</code>，我们的默认导出将组件的名称设置为 <code>app</code> ，并通过将 <code>HelloWorld</code> 组件添加到 <code>components</code> 属性中来注册它。以这种方式注册组件时，就是在本地注册。本地注册的组件只能在注册它们的组件内部使用，因此您需要将其导入并注册到使用它们的每个组件文件中。这对于拆包 &#x2F; tree shaking（译者注：一种减小包体积优化方式）很有用，因为并不是应用程序中的每个页面都不一定需要每个组件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">import HelloWorld from &#x27;./components/HelloWorld.vue&#x27;;<br><br>export default &#123;<br>  name: &#x27;app&#x27;,<br>  components: &#123;<br>    // 可以在这里本地注册组件。<br>    HelloWorld<br>  &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure> <p class = "note note-info">备注： 如果想要使用 TypeScript 语法，你应该将 < script > 标签的 lang 属性设置为 < script lang="ts" > 来告诉编译器你要使用 TypeScript。</p><h2 id="本地运行程序"><a href="#本地运行程序" class="headerlink" title="本地运行程序"></a>本地运行程序</h2><p>终端中输入<code>npm run serve</code>,得到如下结果:</p><p><img src = "/img/vue01.png"></img></p>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用Daovoice实现在线聊天</title>
    <link href="/2022/10/11/%E7%94%A8Daovoice%E5%AE%9E%E7%8E%B0%E5%9C%A8%E7%BA%BF%E8%81%8A%E5%A4%A9/"/>
    <url>/2022/10/11/%E7%94%A8Daovoice%E5%AE%9E%E7%8E%B0%E5%9C%A8%E7%BA%BF%E8%81%8A%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[  <p class="note note-info">记录一下用daovoice实现博客的在线聊天功能</p><h2 id="首先-注册Daovoice账号"><a href="#首先-注册Daovoice账号" class="headerlink" title="首先 注册Daovoice账号"></a>首先 注册Daovoice账号</h2><ul><li><a src="http://dashboard.daovoice.io/get-started?invite_code=7f3d6e70">点击这儿进行注册</a></li></ul><p>注册成功之后点击左边的<code>应用设置</code>-&gt;<code>安装到网站</code>-&gt;<code>仅匿名用户</code></p><p><img src="/img/daovoice.png"></img></p><ul><li>我们可以看到,具体该怎么做他已经写的很详细了捏</li></ul><h2 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h2><p>我们把上图中看到的代码copy到<code>themes\fluid\layout\_partials/head.ejs</code> 下面 (现在用的是fludi,就以fluid为例)</p><p>成果如下图:</p><p><img src="/img/daovoice02.png"></img></p><h2 id="调整"><a href="#调整" class="headerlink" title="调整"></a>调整</h2><p>daovoice还可以自行设置欢迎词与定制聊天窗口样式(虽说很单一……)</p><p>位置就在 <code>应用设置</code>-&gt;<code>聊天设置</code> 里,</p><p><img src="/img/daovoice03.png"></img></p><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>最后当然就是我们的<code>hexo g</code>与<code>hexo d</code>啦</p><p>最终效果如下:</p><p><img src="/img/daovoice04.png"></img></p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何用hexo写博客</title>
    <link href="/2022/10/10/%E9%87%8D%E8%A3%85%E5%95%A6/"/>
    <url>/2022/10/10/%E9%87%8D%E8%A3%85%E5%95%A6/</url>
    
    <content type="html"><![CDATA[<blockquote></blockquote><h2 id="创建一个新文章"><a href="#创建一个新文章" class="headerlink" title="创建一个新文章"></a>创建一个新文章</h2><ul><li><p><code>hexo new &quot;title&quot;</code></p><p>生成的新文章就在\source_posts里面啦</p></li><li><p>直接在\source_posts里面创建.md文件即可</p></li></ul><p>写完小文章之后运行 <code>hexo g</code> 以及 <code>hexo d</code> 就可以发布啦</p><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><ul><li><p>(不使用图床)在source下创建img文件夹专门存放图片,文章中的图片直接用img标签引入,src里填写相对路径</p></li><li><p>(使用图床)picgo</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/10/hello-world/"/>
    <url>/2022/10/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
